############################################################################################
# MOD : Note to self, the decisions are taken from the file "06_ce1_decisions" 
#       so any updates to those decisions will have to be checked per patch
############################################################################################
clear_ground_for_legendary_building = {
	picture = {
		reference = "gfx/interface/illustrations/decisions/decision_legend.dds"
	}
	decision_group_type = major
	sort_order = 100

	is_shown = {
		exists = var:legendary_reward_location
		has_dlc_feature = legends
		is_landed = yes
	}

	############################################################################################
	# MOD : Allows you to actually be able to select the decision and not have it grayed out
	#       because you don't have a county capital or direct vassals to build in
	############################################################################################
	is_valid_showing_failures_only = {
		custom_tooltip = {
			text = clear_ground_for_legendary_building_no_barony_tt
			any_held_title = {
				tier = tier_barony
				title_province = { has_special_building_slot = no }
				# is_capital_barony = yes          <-- Commenting this out makes it so we don't need the county capital requirement
				is_leased_out = no
				OR = {

					# Your own holdings
					holder = root

					# Barony held by a direct vassal
					holder = { liege = root }
				}
			}
		}
	}

	widget = {
		gui = "decision_view_widget_option_list_generic"
		controller = decision_option_list_controller
		decision_to_second_step_button = "CHOOSE_LEGENDARY_BUILDING"
		show_from_start = yes

		item = { # Shrine
			value = clear_ground_legendary_shrine
			is_valid = {
				custom_tooltip = { # The legend you finished is valid for a legendary shrine
					text = clear_ground_legendary_shrine_tt
					has_character_flag = legendary_shrine_flag
				}
			}
			current_description = clear_ground_legendary_shrine_desc
			localization = clear_ground_legendary_shrine
			icon = "gfx/interface/icons/building_types/icon_building_legendary_shrine.dds"
			flat = yes
			ai_chance = { value = 10 }
		}
		item = { # Statue
			value = clear_ground_legendary_statue
			is_valid = {
				custom_tooltip = { # The legend you finished is valid for a legendary statue
					text = clear_ground_legendary_statue_tt
					has_character_flag = legendary_statue_flag
				}
			}
			current_description = clear_ground_legendary_statue_desc
			localization = clear_ground_legendary_statue
			icon = "gfx/interface/icons/building_types/icon_building_legendary_statue.dds"
			flat = yes
			ai_chance = { value = 10 }
		}
		item = { # Palace
			value = clear_ground_legendary_palace
			is_valid = {
				custom_tooltip = { # The legend you finished is valid for a legendary palace
					text = clear_ground_legendary_palace_tt
					has_character_flag = legendary_palace_flag
				}
			}
			current_description = clear_ground_legendary_palace_desc
			localization = clear_ground_legendary_palace
			icon = "gfx/interface/icons/building_types/icon_building_legendary_palace.dds"
			flat = yes
			ai_chance = { value = 10 }
		}
		item = { # Watchtower
			value = clear_ground_legendary_watchtower
			is_valid = {
				custom_tooltip = { # The legend you finished is valid for a legendary watchtower
					text = clear_ground_legendary_watchtower_tt
					has_character_flag = legendary_watchtower_flag
				}
			}
			current_description = clear_ground_legendary_watchtower_desc
			localization = clear_ground_legendary_watchtower
			icon = "gfx/interface/icons/building_types/icon_building_legendary_watchtower.dds"
			flat = yes
			ai_chance = { value = 10 }
		}
		item = { # Hunting lodge
			value = clear_ground_legendary_hunting_lodge
			is_valid = {
				custom_tooltip = { # The legend you finished is valid for a legendary hunting_lodge
					text = clear_ground_legendary_hunting_lodge_tt
					has_character_flag = legendary_hunting_lodge_flag
				}
			}
			current_description = clear_ground_legendary_hunting_lodge_desc
			localization = clear_ground_legendary_hunting_lodge
			icon = "gfx/interface/icons/building_types/icon_building_legendary_hunting_grounds.dds"
			flat = yes
			ai_chance = { value = 10 }
		}
	}

	effect = {					  
		custom_tooltip = clear_ground_for_legendary_building_custom_tt
        switch = {
            trigger = yes
            scope:clear_ground_legendary_shrine = {
                set_variable = {
                    name = clear_ground
                    value = flag:legendary_shrine										  
                }
            } 
            scope:clear_ground_legendary_palace = {
                set_variable = {
                    name = clear_ground							  
                    value = flag:legendary_palace
                }
            }		 
            scope:clear_ground_legendary_statue = {
                set_variable = {
                    name = clear_ground								  
                    value = flag:legendary_statue
                }
            }			 
            scope:clear_ground_legendary_watchtower = {
                set_variable = {
                    name = clear_ground								  
                    value = flag:legendary_watchtower
                }
            }			 
            scope:clear_ground_legendary_hunting_lodge = {									 
                set_variable = {
                    name = clear_ground		 
                    value = flag:legendary_hunting_lodge
                }											 
            }										   
        }
        open_view_data = {
            view = decision_detail
            data = decision:pick_legendary_barony_decision
            player = root											   
        }													 
    }
    ai_check_interval = 36
    ai_potential = {
        is_at_war = no
        ai_greed < medium_positive_ai_value
        short_term_gold > ai_war_chest_desired_gold_value
        war_chest_gold >= halved_ai_war_chest_gold_maximum
    }
    ai_will_do = {
        base = 100 #AI should always reap rewards
    }
}
pick_legendary_barony_decision = {
    picture = {
        reference = "gfx/interface/illustrations/decisions/decision_legend.dds"
    }
	decision_group_type = major
    ai_goal = yes
    is_invisible = yes
    widget = {
        controller = create_holy_order
        barony_valid = {
			############################################################################################
			# MOD : Allows you to see the clear grounds decision without the county capital requirement
			#       and it allows you to build in other vassals only if they are DIRECTLY under you
			############################################################################################
			trigger_if = {
				limit = { exists = this }
				title_province = { has_special_building_slot = no }
				# is_capital_barony = yes                             <-- Commenting this out makes it so we don't need the county capital requirement
				is_leased_out = no
				OR = {

					# Your own holdings
					holder = scope:ruler

					# Barony held by a direct vassal
					holder = { liege = scope:ruler }
				}
			}
        }
    }
    is_valid_showing_failures_only = { # Error suppressing
		has_variable = clear_ground
    }
    cost = {
    }
    effect = {
        send_interface_toast = {
            type = event_toast_effect_good
            title = clear_ground_for_legendary_building.toast
            switch = {
                trigger = root.var:clear_ground
                flag:legendary_shrine = {
                    scope:barony.title_province ?= {
                        add_special_building_slot = legendary_shrine
                    }
                }
                flag:legendary_palace = {
                    scope:barony.title_province ?= {
                        add_special_building_slot = legendary_palace
                    }
                }
                flag:legendary_statue = {
                    scope:barony.title_province ?= {
                        add_special_building_slot = legendary_statue
                    }
                }
                flag:legendary_watchtower = {
                    scope:barony.title_province ?= {
                        add_special_building_slot = legendary_watchtower
                    }
                }
                flag:legendary_hunting_lodge = {
                    scope:barony.title_province ?= {
                        add_special_building_slot = legendary_hunting_lodge
                    }
                }
            }
        }
        hidden_effect = {
            remove_variable = clear_ground
            # Shift the legend protagonist to the province
            if = {
                limit = {
                    exists = var:legendary_figure
                }
                scope:barony.title_province ?= {
                    set_variable = {
                        name = legendary_figure
                        value =  root.var:legendary_figure
                    }
                }
                remove_variable = legendary_figure
            }
            # Cleanup
            if = {
                limit = {
                    has_character_flag = legendary_shrine_flag
                }
                remove_character_flag = legendary_shrine_flag
            }
            if = {
                limit = {
                    has_character_flag = legendary_statue_flag
                }
                remove_character_flag = legendary_statue_flag
            }
            if = {
                limit = {
                    has_character_flag = legendary_palace_flag
                }
                remove_character_flag = legendary_palace_flag
            }
            if = {
                limit = {
                    has_character_flag = legendary_watchtower_flag
                }
                remove_character_flag = legendary_watchtower_flag
            }
            if = {
                limit = {
                    has_character_flag = legendary_hunting_lodge_flag
                }
                remove_character_flag = legendary_hunting_lodge_flag
            }
            if = {
                limit = {
                    exists = var:legendary_reward_location
                }
                remove_variable = legendary_reward_location
            }
        }
    }
    
    ai_potential = {
        is_playable_character = yes
    }
    ai_will_do = {
        base = 200
    }
}